name: Build, test, and publish

on:
  push:
    branches: [ develop, master ]
  pull_request:
    branches: [ develop, master ]
  workflow_dispatch:

jobs:
  build_test_and_publish:
    runs-on: ubuntu-latest
    steps:
    - id: install_gitversion
      name: Install GitVersion
      # Uncomment this when stable GitVersion won't be broken anymore... Judging by last 3 years
      # of me using it - don't ever uncomment this.
      #uses: gittools/actions/gitversion/setup@v0.9.4
      #with:
      #  versionSpec: 'x'
      run: |
        echo "::add-path::${PWD}/boilerplate/_gitversion"

    - id: install_net_core
      name: Install .Net Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '3.1.x'
      env:
        DOTNET_CLI_TELEMETRY_OPTOUT: true

    - id: install_nuget
      name: Install NuGet
      uses: nuget/setup-nuget@v1

    - id: checkout_repository
      name: Checkout repository
      uses: actions/checkout@v2
      with:
        submodules: true

    - id: fetch_repository
      name: Fetch repository for GitVersion
      run: |
        if [[ "$(git rev-parse --is-shallow-repository)" == 'true' ]]; then
          git fetch --no-recurse-submodules --prune --unshallow
        else
          git fetch --no-recurse-submodules --prune
        fi

    - id: get_branch
      name: Get current branch name
      run: echo "##[set-output name=name;]$(git branch --show-current)"

    - id: get_gitversion
      name: Get version from GitVersion
      uses: gittools/actions/gitversion/execute@v0.9.4
      with:
        useConfigFile: true
        configFilePath: GitVersion.yml

    - id: tag_repository
      name: Tag repository
      run: git tag "v${{ steps.get_gitversion.outputs.semVer }}"

    - id: cache_packages
      name: Cache NuGet packages
      uses: actions/cache@v1
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-packages-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-packages-

    - id: restore_packages
      name: Restore NuGet packages
      run: dotnet restore
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN_PACKAGES }}

    - id: build_solution
      name: Build solution
      run: dotnet build --no-restore --configuration Release

    - id: test_solution
      name: Test solution
      run: |
        dotnet test --no-build --configuration Release /property:GenerateCoverageReport=false

    - id: find_coverage
      name: Find code coverage
      run: |
        COVERAGE_FILES="$(find coverage -iname '*_coverage.xml' -printf '%p,' | sed 's/,$//')"
        if [[ -z "${COVERAGE_FILES}" ]]; then
            echo '##[set-output name=coverage_exists;]false'
        else
            echo '##[set-output name=coverage_exists;]true'
            echo "##[set-output name=coverage_files;]${COVERAGE_FILES}"
        fi

    - id: upload_coverage
      name: Upload code coverage
      if: steps.find_coverage.outputs.coverage_exists == 'true'
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.TOKEN_CODECOV }}
        files: ${{ steps.find_coverage.outputs.coverage_files }}
        fail_ci_if_error: true

    - id: package_libraries
      name: Package libraries
      run: |
        dotnet pack --no-build --configuration Release --output packages
        if [[ "$(ls -1 packages 2> /dev/null | wc -l)" == '0' ]]; then
            echo '##[set-output name=packages_exist;]false'
        else
            echo '##[set-output name=packages_exist;]true'
        fi

    - id: push_tag
      name: Push tag
      if: github.event_name == 'push' && steps.get_branch.outputs.name == 'master'
      run: |
        git push origin "refs/tags/v${{ steps.get_gitversion.outputs.semVer }}"

    - id: push_packages
      name: Push packages
      if: github.event_name == 'push' && steps.get_branch.outputs.name == 'master' && steps.package_libraries.outputs.packages_exist == 'true'
      run: |
        nuget push packages/*.nupkg -ConfigFile boilerplate/csharp/NuGet.config -Source github.com -SkipDuplicate
        nuget push packages/*.snupkg -ConfigFile boilerplate/csharp/NuGet.config -Source github.com -SkipDuplicate
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN_PACKAGES }}
